name: Quality Check Terraform Code

on:
  pull_request:
    paths-ignore:
      - '.github/**'
      - 'README.md'
      - '.gitignore'
  workflow_call:

env:
  TF_IN_AUTOMATION: "1"
  TF_VAR_github_token: ${{ secrets.GH_TOKEN }} # repositories will be created unde the user associated with this PAT

jobs:

  init-validate-plan:
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Run 'terraform fmt'
        id: fmt
        run: terraform fmt -check -recursive
      
      - name: Run 'terraform init'
        id: init
        run: |
          terraform init -upgrade
       
      - name: Run 'terraform validate'
        id: validate
        run: terraform validate -no-color

      - name: Run 'terraform plan'
        id: planStep
        run: |
          terraform plan -input=false
      
      # On PR events, comment on the PR with the TF step statuses
      # The always() allows this step to run regardless of whether the steps above failed, as we want to see which stage failed
      - name: Update PR with Terraform quality step outputs
        uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request' && always()
        with:
          github-token: ${{ secrets.INTEGRATION_TOKEN }}
          script: |
            const output = `## Terraform Quality Check Update ü§ñ
            This is an automated message generated by the Terraform-Quality-Check workflow run. It displays the statuses of the formatting, initialisation and validation of the Terraform source files.
            
            ### Quality Check 
            <details>
            <summary><h2>üñå Terraform Format and Style</h2></summary>
            \`${{ steps.fmt.outcome }}\`
            </details>

            <details>
            <summary><h2>‚öôÔ∏è Terraform Initialization</h2></summary>
            \`${{ steps.init.outcome }}\`
            </details>

            <details>
            <summary><h2>‚úÖ Terraform Validation</h2></summary>
            \`${{ steps.validate.outcome }}\`
            </details>

            ### Plan 
            <details>
            <summary><h2>Plan Output</h2></summary>
            \`${{ steps.planStep.outcome }}\`
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })